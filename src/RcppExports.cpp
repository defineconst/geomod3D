// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// vectorized_pdist
NumericMatrix vectorized_pdist(NumericMatrix Ar, NumericMatrix Br);
RcppExport SEXP _geomod3D_vectorized_pdist(SEXP ArSEXP, SEXP BrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Br(BrSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorized_pdist(Ar, Br));
    return rcpp_result_gen;
END_RCPP
}
// covd1_gaussian
NumericMatrix covd1_gaussian(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix A);
RcppExport SEXP _geomod3D_covd1_gaussian(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd1_gaussian(u, v, dir1, A));
    return rcpp_result_gen;
END_RCPP
}
// covd2_gaussian
NumericMatrix covd2_gaussian(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix dir2, NumericMatrix A);
RcppExport SEXP _geomod3D_covd2_gaussian(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP dir2SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir2(dir2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd2_gaussian(u, v, dir1, dir2, A));
    return rcpp_result_gen;
END_RCPP
}
// covd1_cubic
NumericMatrix covd1_cubic(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix A);
RcppExport SEXP _geomod3D_covd1_cubic(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd1_cubic(u, v, dir1, A));
    return rcpp_result_gen;
END_RCPP
}
// covd2_cubic
NumericMatrix covd2_cubic(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix dir2, NumericMatrix A);
RcppExport SEXP _geomod3D_covd2_cubic(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP dir2SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir2(dir2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd2_cubic(u, v, dir1, dir2, A));
    return rcpp_result_gen;
END_RCPP
}
// covd1_matern1
NumericMatrix covd1_matern1(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix A);
RcppExport SEXP _geomod3D_covd1_matern1(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd1_matern1(u, v, dir1, A));
    return rcpp_result_gen;
END_RCPP
}
// covd2_matern1
NumericMatrix covd2_matern1(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix dir2, NumericMatrix A);
RcppExport SEXP _geomod3D_covd2_matern1(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP dir2SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir2(dir2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd2_matern1(u, v, dir1, dir2, A));
    return rcpp_result_gen;
END_RCPP
}
// covd1_matern2
NumericMatrix covd1_matern2(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix A);
RcppExport SEXP _geomod3D_covd1_matern2(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd1_matern2(u, v, dir1, A));
    return rcpp_result_gen;
END_RCPP
}
// covd2_matern2
NumericMatrix covd2_matern2(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix dir2, NumericMatrix A);
RcppExport SEXP _geomod3D_covd2_matern2(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP dir2SEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir2(dir2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(covd2_matern2(u, v, dir1, dir2, A));
    return rcpp_result_gen;
END_RCPP
}
// covd1_cauchy
NumericMatrix covd1_cauchy(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix A, double p);
RcppExport SEXP _geomod3D_covd1_cauchy(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP ASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(covd1_cauchy(u, v, dir1, A, p));
    return rcpp_result_gen;
END_RCPP
}
// covd2_cauchy
NumericMatrix covd2_cauchy(NumericMatrix u, NumericMatrix v, NumericMatrix dir1, NumericMatrix dir2, NumericMatrix A, double p);
RcppExport SEXP _geomod3D_covd2_cauchy(SEXP uSEXP, SEXP vSEXP, SEXP dir1SEXP, SEXP dir2SEXP, SEXP ASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir1(dir1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dir2(dir2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(covd2_cauchy(u, v, dir1, dir2, A, p));
    return rcpp_result_gen;
END_RCPP
}
// anisotropyC
NumericMatrix anisotropyC(double maxrange, double midrange, double minrange, double azimuth, double dip, double rake);
RcppExport SEXP _geomod3D_anisotropyC(SEXP maxrangeSEXP, SEXP midrangeSEXP, SEXP minrangeSEXP, SEXP azimuthSEXP, SEXP dipSEXP, SEXP rakeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type maxrange(maxrangeSEXP);
    Rcpp::traits::input_parameter< double >::type midrange(midrangeSEXP);
    Rcpp::traits::input_parameter< double >::type minrange(minrangeSEXP);
    Rcpp::traits::input_parameter< double >::type azimuth(azimuthSEXP);
    Rcpp::traits::input_parameter< double >::type dip(dipSEXP);
    Rcpp::traits::input_parameter< double >::type rake(rakeSEXP);
    rcpp_result_gen = Rcpp::wrap(anisotropyC(maxrange, midrange, minrange, azimuth, dip, rake));
    return rcpp_result_gen;
END_RCPP
}
// cov_ns
NumericMatrix cov_ns(NumericMatrix x, NumericMatrix y, NumericVector x_sd, NumericVector y_sd, NumericVector x_maxrange, NumericVector y_maxrange, NumericVector x_midrange, NumericVector y_midrange, NumericVector x_minrange, NumericVector y_minrange, NumericVector x_azimuth, NumericVector y_azimuth, NumericVector x_dip, NumericVector y_dip, NumericVector x_rake, NumericVector y_rake, String type, double p);
RcppExport SEXP _geomod3D_cov_ns(SEXP xSEXP, SEXP ySEXP, SEXP x_sdSEXP, SEXP y_sdSEXP, SEXP x_maxrangeSEXP, SEXP y_maxrangeSEXP, SEXP x_midrangeSEXP, SEXP y_midrangeSEXP, SEXP x_minrangeSEXP, SEXP y_minrangeSEXP, SEXP x_azimuthSEXP, SEXP y_azimuthSEXP, SEXP x_dipSEXP, SEXP y_dipSEXP, SEXP x_rakeSEXP, SEXP y_rakeSEXP, SEXP typeSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_sd(x_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_sd(y_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_maxrange(x_maxrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_maxrange(y_maxrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_midrange(x_midrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_midrange(y_midrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_minrange(x_minrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_minrange(y_minrangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_azimuth(x_azimuthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_azimuth(y_azimuthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_dip(x_dipSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_dip(y_dipSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_rake(x_rakeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_rake(y_rakeSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_ns(x, y, x_sd, y_sd, x_maxrange, y_maxrange, x_midrange, y_midrange, x_minrange, y_minrange, x_azimuth, y_azimuth, x_dip, y_dip, x_rake, y_rake, type, p));
    return rcpp_result_gen;
END_RCPP
}
// sparse_sim
NumericVector sparse_sim(IntegerVector path, NumericVector nugget, NumericVector w_, NumericMatrix Bi_, NumericMatrix KMi_, NumericVector maxvar, NumericMatrix K_, NumericVector d_, NumericVector yTR, NumericVector vTR, bool discount_noise, NumericVector Q_, bool smooth, NumericVector randnum, double reg);
RcppExport SEXP _geomod3D_sparse_sim(SEXP pathSEXP, SEXP nuggetSEXP, SEXP w_SEXP, SEXP Bi_SEXP, SEXP KMi_SEXP, SEXP maxvarSEXP, SEXP K_SEXP, SEXP d_SEXP, SEXP yTRSEXP, SEXP vTRSEXP, SEXP discount_noiseSEXP, SEXP Q_SEXP, SEXP smoothSEXP, SEXP randnumSEXP, SEXP regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bi_(Bi_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type KMi_(KMi_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxvar(maxvarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_(d_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yTR(yTRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vTR(vTRSEXP);
    Rcpp::traits::input_parameter< bool >::type discount_noise(discount_noiseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Q_(Q_SEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type randnum(randnumSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_sim(path, nugget, w_, Bi_, KMi_, maxvar, K_, d_, yTR, vTR, discount_noise, Q_, smooth, randnum, reg));
    return rcpp_result_gen;
END_RCPP
}
// SPGP_CV
List SPGP_CV(NumericVector w_, NumericMatrix Bi_, NumericVector y_, NumericMatrix K_, NumericVector d_, NumericVector yTR, NumericVector vTR);
RcppExport SEXP _geomod3D_SPGP_CV(SEXP w_SEXP, SEXP Bi_SEXP, SEXP y_SEXP, SEXP K_SEXP, SEXP d_SEXP, SEXP yTRSEXP, SEXP vTRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Bi_(Bi_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_(d_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yTR(yTRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vTR(vTRSEXP);
    rcpp_result_gen = Rcpp::wrap(SPGP_CV(w_, Bi_, y_, K_, d_, yTR, vTR));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_geomod3D_vectorized_pdist", (DL_FUNC) &_geomod3D_vectorized_pdist, 2},
    {"_geomod3D_covd1_gaussian", (DL_FUNC) &_geomod3D_covd1_gaussian, 4},
    {"_geomod3D_covd2_gaussian", (DL_FUNC) &_geomod3D_covd2_gaussian, 5},
    {"_geomod3D_covd1_cubic", (DL_FUNC) &_geomod3D_covd1_cubic, 4},
    {"_geomod3D_covd2_cubic", (DL_FUNC) &_geomod3D_covd2_cubic, 5},
    {"_geomod3D_covd1_matern1", (DL_FUNC) &_geomod3D_covd1_matern1, 4},
    {"_geomod3D_covd2_matern1", (DL_FUNC) &_geomod3D_covd2_matern1, 5},
    {"_geomod3D_covd1_matern2", (DL_FUNC) &_geomod3D_covd1_matern2, 4},
    {"_geomod3D_covd2_matern2", (DL_FUNC) &_geomod3D_covd2_matern2, 5},
    {"_geomod3D_covd1_cauchy", (DL_FUNC) &_geomod3D_covd1_cauchy, 5},
    {"_geomod3D_covd2_cauchy", (DL_FUNC) &_geomod3D_covd2_cauchy, 6},
    {"_geomod3D_anisotropyC", (DL_FUNC) &_geomod3D_anisotropyC, 6},
    {"_geomod3D_cov_ns", (DL_FUNC) &_geomod3D_cov_ns, 18},
    {"_geomod3D_sparse_sim", (DL_FUNC) &_geomod3D_sparse_sim, 15},
    {"_geomod3D_SPGP_CV", (DL_FUNC) &_geomod3D_SPGP_CV, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_geomod3D(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
